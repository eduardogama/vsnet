//
// Generated file, do not edit! Created by nedtool 5.4 from server/DashAppMsg.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __INET_DASHAPPMSG_M_H
#define __INET_DASHAPPMSG_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class DashAppMsg;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/Units_m.h" // import inet.common.Units

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Class generated from <tt>server/DashAppMsg.msg:10</tt> by nedtool.
 * <pre>
 * class DashAppMsg extends FieldsChunk
 * {
 *     B expectedReplyLength;   // in bytes
 *     double replyDelay;       // reply after this many seconds
 *     bool serverClose;        // with TCP: if true, server should close the
 *                              // connection after sending the reply
 *     int StartByte;
 *     int EndByte;
 *     string redirectAddress;
 * }
 * </pre>
 */
class DashAppMsg : public ::inet::FieldsChunk
{
  protected:
    B expectedReplyLength = B(-1);
    double replyDelay = 0;
    bool serverClose = false;
    int StartByte = 0;
    int EndByte = 0;
    omnetpp::opp_string redirectAddress;

  private:
    void copy(const DashAppMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DashAppMsg&);

  public:
    DashAppMsg();
    DashAppMsg(const DashAppMsg& other);
    virtual ~DashAppMsg();
    DashAppMsg& operator=(const DashAppMsg& other);
    virtual DashAppMsg *dup() const override {return new DashAppMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual B getExpectedReplyLength() const;
    virtual void setExpectedReplyLength(B expectedReplyLength);
    virtual double getReplyDelay() const;
    virtual void setReplyDelay(double replyDelay);
    virtual bool getServerClose() const;
    virtual void setServerClose(bool serverClose);
    virtual int getStartByte() const;
    virtual void setStartByte(int StartByte);
    virtual int getEndByte() const;
    virtual void setEndByte(int EndByte);
    virtual const char * getRedirectAddress() const;
    virtual void setRedirectAddress(const char * redirectAddress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DashAppMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DashAppMsg& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_DASHAPPMSG_M_H

