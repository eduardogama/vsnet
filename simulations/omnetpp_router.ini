[General]
network = router_scenario

record-eventlog = true
warnings = true
sim-time-limit = 3600.0s

cmdenv-interactive=true
#cmdenv-module-messages = true # for normal (non-express) mode only
cmdenv-event-banners = true   # for normal (non-express) mode only

tkenv-plugin-path = ../../inet/etc/plugins

# Allow channels to collect statistics
**.channel.throughput.result-recording-modes = all
**.channel.utilization.result-recording-modes = all
**.channel.busy.result-recording-modes = all

#
# Network specific settings
#

# set inet_addr, Mask, MTU ( = 1500), default route
#**.client.routingFile = "client.mrt"
#**.server.routingFile = "server.mrt"

# ip settings
**.ip.procDelay = 0s
#**.IPForward = false

# hookType settings
**.server*.ppp[*].numOutputHooks = 1
**.server*.ppp[*].outputHook[0].typename = "ThruputMeter" # Nop | ThruputMeter | OrdinalBasedDropper | OrdinalBasedDuplicator | Delayer | ...

# pcap traces
**.server1.numPcapRecorders = 1
**.server1.pcapRecorder[0].pcapFile = "results/server-ber_c1-${c1ber}-ber_c2-${c2ber}.pcap"
**.client1.numPcapRecorders = 1
**.client1.pcapRecorder[0].pcapFile = "results/client1-ber_c1-${c1ber}-ber_c2-${c2ber}.pcap"       # Other variables that can be used: ${configname} ${runnumber}
**.client2.numPcapRecorders = 1
**.client2.pcapRecorder[0].pcapFile = "results/client2-ber_c1-${c1ber}-ber_c2-${c2ber}.pcap"       # Other variables that can be used: ${configname} ${runnumber}
**.client3.numPcapRecorders = 1
**.client3.pcapRecorder[0].pcapFile = "results/client3-ber_c1-${c1ber}-ber_c2-${c2ber}.pcap"       # Other variables that can be used: ${configname} ${runnumber}

# ARP settings
**.arp.retryTimeout = 1s
**.arp.retryCount = 3
**.arp.cacheTimeout = 100s

# NIC settings
**.ppp[*].queueType = "DropTailQueue"
**.ppp[*].queue.frameCapacity = 100    # packets

# thruput measurement settings
**.startTime = 0s     # start time
**.batchSize = 50     # number of packets in a batch
**.maxInterval = 1s   # max length of measurement interval (measurement ends
                      # if either batchsize or maxinterval is reached, whichever
                      # is reached first)

# HTTP Cross Traffic Controller
**.controller.logLevel = 2
**.controller.events = ""
**.controller.eventsSection = ""
**.controller.config = xmldoc("controller_cfg.xml","//controller-profile[@id='uniform']")

# Common client/server parameters
**.numApps = 1
**.app[0].httpProtocol = 11

**.tcpType = "TCP"

# tcp apps - video streaming client settings
**.client1.app[*].typename = "TCPAdaptiveVideoClientApp"  # DASH
**.client1.app[*].video_duration = 600
**.client1.app[*].requestLength = 100B
#**.client*.tcpApp[*].replyLength = 500B
#**.client*.tcpApp[*].thinkTime = 1s
#**.client*.tcpApp[*].idleInterval = 1s
**.client1.app[*].localPort = 10020
**.client1.app[*].connectAddress = "server1"
**.client1.app[*].connectPort = 10021
**.client1.app[*].dataTransferMode = "object"
**.client1.app[*].localAddress = "client1"


# tcp apps - cross-traffic client settings
**.client{2,3}.app[0].typename="HttpBrowser"
#**.client2.tcpApp[0].hostName="" # Not applicable
#**.client2.tcpApp[0].port=-1
**.client{2,3}.app[0].logLevel=0
**.client{2,3}.app[0].logFile=""
**.client{2,3}.app[0].scriptFile=""  # Free running
**.client{2,3}.app[0].config=xmldoc("browser_cfg.xml","//user-profile[@id='normal']")
**.client{2,3}.app[0].activationTime=0s
#**.client2.tcpApp[0].localAddress = "client2"


# tcp apps - video streaming server settings
#**.server1.numTcpApps = 1
**.server1.app[*].typename = "TcpGenericServerApp"
#**.server1.tcpApp[*].localAddress = "server"
**.server1.app[*].localPort = 10021

# tcp apps - Cross Traffic Server
**.server2.app[0].typename="HttpServer"
**.server2.app[0].hostName=""
**.server2.app[0].port=80
**.server2.app[0].logLevel=0
**.server2.app[0].logFile=""
**.server2.app[0].siteDefinition=""
**.server2.app[0].config=xmldoc("server_cfg.xml","//server-profile[@id='normal']")
**.server2.app[0].activationTime=0.0

# tcp general settings
**.tcp.advertisedWindow = 65535                      # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)
**.tcp.delayedAcksEnabled = false                    # delayed ACK algorithm (RFC 1122) enabled/disabled
**.tcp.nagleEnabled = true                           # Nagle's algorithm (RFC 896) enabled/disabled
**.tcp.limitedTransmitEnabled = false                # Limited Transmit algorithm (RFC 3042) enabled/disabled (can be used for TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl)
**.tcp.increasedIWEnabled = false                    # Increased Initial Window (RFC 3390) enabled/disabled
**.tcp.sackSupport = false                           # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)
**.tcp.windowScalingSupport = false                  # Window Scale (RFC 1323) support (header option) (WS will be enabled for a connection if both endpoints support it)
**.tcp.timestampSupport = false                      # Timestamps (RFC 1323) support (header option) (TS will be enabled for a connection if both endpoints support it)
**.tcp.mss = 1452                                    # Maximum Segment Size (RFC 793) (header option)
**.tcp.tcpAlgorithmClass = "TCPReno"                 # TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl/DumbTCP
**.tcp.recordStats = true                            # recording of seqNum etc. into output vectors enabled/disabled

# Channel settings
#**.C2_ber = ${c1ber = 1e-5, 1e-7}
#**.C1_ber = ${c2ber = 1e-5, 1e-7}
**.C2_ber = ${c1ber = 0}
**.C1_ber = ${c2ber = 0}

repeat = 1


#
# Config specific settings
#

#[Config ber-sack-experiment]
#description = "ber-sack-experiment"
#**.tcp.sackSupport = ${sack=true, false}

#[Config ber-flavour-experiment]
#description = "ber-flavour-experiment"
#**.tcp.tcpAlgorithmClass = ${flavour = "TCPReno", "TCPNewReno" }